{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{{ attach_library('galpmoz_theme/call_banner') }}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    content.field_full_width.0|e|striptags|trim == 1 ? 'full-width' :''
  ]
%}
{% set classesText =  content.field_full_width.0|e|striptags|trim == 1 ? 'col-md-7' :'col-md-12' %}
{% set bg_url = file_url(content.field_background_image[0]['#media'].field_media_image.entity.uri.value) %}
{% set overlay_url = file_url(content.field_overlay_image[0]['#media'].field_media_image.entity.uri.value) %}


{% block paragraph %}
	<div{{attributes.addClass(classes)}}>
		{% block content %}
			<div class="bg" style="background-image: url('{{bg_url}}')"></div>
			<div class="overlay" style="background-image: url('{{overlay_url}}')"></div>
				<div class="text-container {{classesText}}">
					<div class="title-container">
						<h3 class="title">{{content.field_title.0|e|striptags|trim}}</h3>
					</div>	
					{% if content.field_subtitle.0 %}
						<span class="sub-title">{{content.field_subtitle.0|e|striptags|trim}}</span>
					{% endif  %}								
					{% if content.field_icon.0 %}
						<div class="icon">{{content.field_icon }}</div>
					{% endif  %}
					{% if content.field_telephone %}
						{{content.field_telephone}}
					{% endif  %}
					{% if content.field_description.0 %}
						<p>{{content.field_description.0|e|striptags|trim}}</p>
					{% endif  %}
				</div>
		{% endblock %}
	</div>
{% endblock paragraph %}
